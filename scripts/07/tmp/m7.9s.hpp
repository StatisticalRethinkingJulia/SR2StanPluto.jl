
// Code generated by stanc fa623df
#include <stan/model/model_header.hpp>
namespace m7x469s_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 11, column 4 to column 11)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 12, column 4 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 13, column 4 to column 24)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 15, column 4 to column 24)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 18, column 4 to column 17)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 19, column 4 to column 25)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 29, column 4 to column 22)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 30, column 4 to column 30)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 33, column 8 to column 54)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 32, column 4 to line 33, column 54)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 36, column 8 to column 66)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 35, column 4 to line 36, column 66)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 25, column 4 to column 26)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 26, column 4 to column 34)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 2, column 4 to column 19)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 3, column 4 to column 19)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 4, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 4, column 14 to column 15)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 4, column 4 to column 19)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 5, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 5, column 4 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 7, column 4 to column 23)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 8, column 11 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 8, column 18 to column 19)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 8, column 4 to column 27)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 12, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 15, column 11 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 18, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 19, column 11 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 29, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/StatisticalRethinkingStan/scripts/07/tmp/m7.9s.stan', line 30, column 11 to column 16)"};



class m7x469s_model final : public model_base_crtp<m7x469s_model> {

 private:
  double lcm_sym48__;
  double lcm_sym47__;
  double lcm_sym46__;
  double lcm_sym45__;
  double lcm_sym44__;
  double lcm_sym43__;
  int lcm_sym42__;
  int lcm_sym41__;
  int lcm_sym40__;
  int lcm_sym39__;
  int K;
  int N;
  Eigen::Matrix<double, -1, -1> x;
  Eigen::Matrix<double, -1, 1> y;
  int N_new;
  Eigen::Matrix<double, -1, -1> x_new;
 
 public:
  ~m7x469s_model() { }
  
  inline std::string model_name() const final { return "m7x469s_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 fa623df", "stancflags = --warn-pedantic --O"};
  }
  
  
  m7x469s_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "m7x469s_model_namespace::m7x469s_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      
      
      
      
      
      
      
      
      
      
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 16;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 17;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 18;
      validate_non_negative_index("x", "K", K);
      current_statement__ = 19;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, K));
      x = Eigen::Matrix<double, -1, -1>(N, K);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_flat__;
        current_statement__ = 19;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 19;
        pos__ = 1;
        lcm_sym39__ = logical_gte(K, 1);
        if (lcm_sym39__) {
          {
            lcm_sym40__ = logical_gte(N, 1);
            if (lcm_sym40__) {
              current_statement__ = 19;
              assign(x,
                cons_list(index_uni(1),
                  cons_list(index_uni(1), nil_index_list())),
                x_flat__[(1 - 1)], "assigning variable x");
              current_statement__ = 19;
              pos__ = 2;
              for (int sym2__ = 2; sym2__ <= N; ++sym2__) {
                current_statement__ = 19;
                assign(x,
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(1), nil_index_list())),
                  x_flat__[(pos__ - 1)], "assigning variable x");
                current_statement__ = 19;
                pos__ = (pos__ + 1);}
            } 
            for (int sym1__ = 2; sym1__ <= K; ++sym1__) {
              current_statement__ = 19;
              if (lcm_sym40__) {
                current_statement__ = 19;
                assign(x,
                  cons_list(index_uni(1),
                    cons_list(index_uni(sym1__), nil_index_list())),
                  x_flat__[(pos__ - 1)], "assigning variable x");
                current_statement__ = 19;
                pos__ = (pos__ + 1);
                for (int sym2__ = 2; sym2__ <= N; ++sym2__) {
                  current_statement__ = 19;
                  assign(x,
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list())),
                    x_flat__[(pos__ - 1)], "assigning variable x");
                  current_statement__ = 19;
                  pos__ = (pos__ + 1);}
              } }
          }
        } else {
          lcm_sym40__ = logical_gte(N, 1);
        }
      }
      current_statement__ = 20;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> y_flat__;
        current_statement__ = 21;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        if (lcm_sym40__) {
          current_statement__ = 21;
          assign(y, cons_list(index_uni(1), nil_index_list()),
            y_flat__[(1 - 1)], "assigning variable y");
          current_statement__ = 21;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
            current_statement__ = 21;
            assign(y, cons_list(index_uni(sym1__), nil_index_list()),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 21;
            pos__ = (pos__ + 1);}
        } 
      }
      current_statement__ = 22;
      context__.validate_dims("data initialization","N_new","int",
          context__.to_vec());
      N_new = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N_new = context__.vals_i("N_new")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N_new", N_new, 0);
      current_statement__ = 23;
      validate_non_negative_index("x_new", "N_new", N_new);
      current_statement__ = 24;
      validate_non_negative_index("x_new", "K", K);
      current_statement__ = 25;
      context__.validate_dims("data initialization","x_new","double",
          context__.to_vec(N_new, K));
      x_new = Eigen::Matrix<double, -1, -1>(N_new, K);
      stan::math::fill(x_new, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_new_flat__;
        current_statement__ = 25;
        assign(x_new_flat__, nil_index_list(), context__.vals_r("x_new"),
          "assigning variable x_new_flat__");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        if (lcm_sym39__) {
          lcm_sym41__ = logical_gte(N_new, 1);
          if (lcm_sym41__) {
            current_statement__ = 25;
            assign(x_new,
              cons_list(index_uni(1),
                cons_list(index_uni(1), nil_index_list())),
              x_new_flat__[(1 - 1)], "assigning variable x_new");
            current_statement__ = 25;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_new; ++sym2__) {
              current_statement__ = 25;
              assign(x_new,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(1), nil_index_list())),
                x_new_flat__[(pos__ - 1)], "assigning variable x_new");
              current_statement__ = 25;
              pos__ = (pos__ + 1);}
          } 
          for (int sym1__ = 2; sym1__ <= K; ++sym1__) {
            current_statement__ = 25;
            if (lcm_sym41__) {
              current_statement__ = 25;
              assign(x_new,
                cons_list(index_uni(1),
                  cons_list(index_uni(sym1__), nil_index_list())),
                x_new_flat__[(pos__ - 1)], "assigning variable x_new");
              current_statement__ = 25;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_new; ++sym2__) {
                current_statement__ = 25;
                assign(x_new,
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list())),
                  x_new_flat__[(pos__ - 1)], "assigning variable x_new");
                current_statement__ = 25;
                pos__ = (pos__ + 1);}
            } }
        } 
      }
      current_statement__ = 26;
      validate_non_negative_index("b", "K", K);
      current_statement__ = 27;
      validate_non_negative_index("y_new", "N_new", N_new);
      current_statement__ = 28;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 29;
      validate_non_negative_index("mu_new", "N_new", N_new);
      current_statement__ = 30;
      validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 31;
      validate_non_negative_index("log_lik_new", "N_new", N_new);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += K;
      num_params_r__ += 1;
      num_params_r__ += N_new;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "m7x469s_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double lcm_sym38__;
      double lcm_sym37__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym36__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym35__;
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 1;
      a = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(b, DUMMY_VAR__);
      
      current_statement__ = 2;
      b = in__.vector(K);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> y_new;
      y_new = Eigen::Matrix<local_scalar_t__, -1, 1>(N_new);
      stan::math::fill(y_new, DUMMY_VAR__);
      
      current_statement__ = 4;
      y_new = in__.vector(N_new);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_new;
      mu_new = Eigen::Matrix<local_scalar_t__, -1, 1>(N_new);
      stan::math::fill(mu_new, DUMMY_VAR__);
      
      assign(lcm_sym35__, nil_index_list(), add(a, multiply(x, b)),
        "assigning variable lcm_sym35__");
      assign(mu, nil_index_list(), lcm_sym35__, "assigning variable mu");
      assign(lcm_sym36__, nil_index_list(), add(a, multiply(x_new, b)),
        "assigning variable lcm_sym36__");
      assign(mu_new, nil_index_list(), lcm_sym36__,
        "assigning variable mu_new");
      {
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(y, lcm_sym35__, sigma));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(y_new, lcm_sym36__, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "m7x469s_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double lcm_sym34__;
      double lcm_sym33__;
      double lcm_sym32__;
      double lcm_sym31__;
      double lcm_sym30__;
      double lcm_sym29__;
      double lcm_sym28__;
      double lcm_sym27__;
      double lcm_sym26__;
      double lcm_sym25__;
      double lcm_sym24__;
      double lcm_sym23__;
      double lcm_sym22__;
      double lcm_sym21__;
      double lcm_sym20__;
      double lcm_sym19__;
      Eigen::Matrix<double, -1, 1> lcm_sym18__;
      Eigen::Matrix<double, -1, 1> lcm_sym17__;
      int lcm_sym16__;
      int lcm_sym15__;
      int lcm_sym14__;
      int lcm_sym13__;
      int lcm_sym12__;
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = in__.scalar();
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      b = in__.vector(K);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      sigma = stan::math::lb_constrain(sigma, 0);
      Eigen::Matrix<double, -1, 1> y_new;
      y_new = Eigen::Matrix<double, -1, 1>(N_new);
      stan::math::fill(y_new, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      y_new = in__.vector(N_new);
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_new;
      mu_new = Eigen::Matrix<double, -1, 1>(N_new);
      stan::math::fill(mu_new, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(a);
      if (logical_gte(K, 1)) {
        vars__.emplace_back(b[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
      } 
      vars__.emplace_back(sigma);
      lcm_sym14__ = logical_gte(N_new, 1);
      if (lcm_sym14__) {
        vars__.emplace_back(y_new[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N_new; ++sym1__) {
          vars__.emplace_back(y_new[(sym1__ - 1)]);}
      } 
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      assign(lcm_sym17__, nil_index_list(), add(a, multiply(x, b)),
        "assigning variable lcm_sym17__");
      assign(mu, nil_index_list(), lcm_sym17__, "assigning variable mu");
      assign(lcm_sym18__, nil_index_list(), add(a, multiply(x_new, b)),
        "assigning variable lcm_sym18__");
      assign(mu_new, nil_index_list(), lcm_sym18__,
        "assigning variable mu_new");
      if (emit_transformed_parameters__) {
        {
          lcm_sym13__ = logical_gte(N, 1);
          if (lcm_sym13__) {
            vars__.emplace_back(lcm_sym17__[(1 - 1)]);
            for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
              vars__.emplace_back(lcm_sym17__[(sym1__ - 1)]);}
          } 
          if (lcm_sym14__) {
            vars__.emplace_back(lcm_sym18__[(1 - 1)]);
            for (int sym1__ = 2; sym1__ <= N_new; ++sym1__) {
              vars__.emplace_back(lcm_sym18__[(sym1__ - 1)]);}
          } 
        }
      } else {
        lcm_sym13__ = logical_gte(N, 1);
      }
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_new;
      log_lik_new = Eigen::Matrix<double, -1, 1>(N_new);
      stan::math::fill(log_lik_new, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      if (lcm_sym13__) {
        current_statement__ = 9;
        assign(log_lik, cons_list(index_uni(1), nil_index_list()),
          normal_lpdf<false>(y[(1 - 1)], lcm_sym17__[(1 - 1)], sigma),
          "assigning variable log_lik");
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 9;
          assign(log_lik, cons_list(index_uni(i), nil_index_list()),
            normal_lpdf<false>(y[(i - 1)], lcm_sym17__[(i - 1)], sigma),
            "assigning variable log_lik");}
      } 
      current_statement__ = 12;
      if (lcm_sym14__) {
        current_statement__ = 11;
        assign(log_lik_new, cons_list(index_uni(1), nil_index_list()),
          normal_lpdf<false>(y_new[(1 - 1)], lcm_sym18__[(1 - 1)], sigma),
          "assigning variable log_lik_new");
        for (int j = 2; j <= N_new; ++j) {
          current_statement__ = 11;
          assign(log_lik_new, cons_list(index_uni(j), nil_index_list()),
            normal_lpdf<false>(y_new[(j - 1)], lcm_sym18__[(j - 1)], sigma),
            "assigning variable log_lik_new");}
      } 
      if (lcm_sym13__) {
        vars__.emplace_back(log_lik[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      } 
      if (lcm_sym14__) {
        vars__.emplace_back(log_lik_new[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N_new; ++sym1__) {
          vars__.emplace_back(log_lik_new[(sym1__ - 1)]);}
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      double lcm_sym11__;
      double lcm_sym10__;
      double lcm_sym9__;
      double lcm_sym8__;
      double lcm_sym7__;
      double lcm_sym6__;
      double lcm_sym5__;
      double lcm_sym4__;
      int lcm_sym3__;
      int lcm_sym2__;
      int lcm_sym1__;
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = context__.vals_r("a")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> b_flat__;
        current_statement__ = 2;
        assign(b_flat__, nil_index_list(), context__.vals_r("b"),
          "assigning variable b_flat__");
        current_statement__ = 2;
        pos__ = 1;
        lcm_sym1__ = logical_gte(K, 1);
        if (lcm_sym1__) {
          current_statement__ = 2;
          assign(b, cons_list(index_uni(1), nil_index_list()),
            b_flat__[(1 - 1)], "assigning variable b");
          current_statement__ = 2;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= K; ++sym1__) {
            current_statement__ = 2;
            assign(b, cons_list(index_uni(sym1__), nil_index_list()),
              b_flat__[(pos__ - 1)], "assigning variable b");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}
        } 
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, 1> y_new;
      y_new = Eigen::Matrix<double, -1, 1>(N_new);
      stan::math::fill(y_new, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> y_new_flat__;
        current_statement__ = 4;
        assign(y_new_flat__, nil_index_list(), context__.vals_r("y_new"),
          "assigning variable y_new_flat__");
        current_statement__ = 4;
        pos__ = 1;
        lcm_sym2__ = logical_gte(N_new, 1);
        if (lcm_sym2__) {
          current_statement__ = 4;
          assign(y_new, cons_list(index_uni(1), nil_index_list()),
            y_new_flat__[(1 - 1)], "assigning variable y_new");
          current_statement__ = 4;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= N_new; ++sym1__) {
            current_statement__ = 4;
            assign(y_new, cons_list(index_uni(sym1__), nil_index_list()),
              y_new_flat__[(pos__ - 1)], "assigning variable y_new");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}
        } 
      }
      vars__.emplace_back(a);
      if (lcm_sym1__) {
        vars__.emplace_back(b[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
      } 
      vars__.emplace_back(sigma_free__);
      if (lcm_sym2__) {
        vars__.emplace_back(y_new[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N_new; ++sym1__) {
          vars__.emplace_back(y_new[(sym1__ - 1)]);}
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("a");
    names__.emplace_back("b");
    names__.emplace_back("sigma");
    names__.emplace_back("y_new");
    names__.emplace_back("mu");
    names__.emplace_back("mu_new");
    names__.emplace_back("log_lik");
    names__.emplace_back("log_lik_new");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_new)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_new)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_new)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    for (int sym49__ = 1; sym49__ <= K; ++sym49__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym49__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
      {
        param_names__.emplace_back(std::string() + "y_new" + '.' + std::to_string(sym49__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym49__ = 1; sym49__ <= N; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym49__));
        }}
      for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "mu_new" + '.' + std::to_string(sym49__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym49__ = 1; sym49__ <= N; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym49__));
        }}
      for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_new" + '.' + std::to_string(sym49__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    for (int sym49__ = 1; sym49__ <= K; ++sym49__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym49__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
      {
        param_names__.emplace_back(std::string() + "y_new" + '.' + std::to_string(sym49__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym49__ = 1; sym49__ <= N; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym49__));
        }}
      for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "mu_new" + '.' + std::to_string(sym49__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym49__ = 1; sym49__ <= N; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym49__));
        }}
      for (int sym49__ = 1; sym49__ <= N_new; ++sym49__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_new" + '.' + std::to_string(sym49__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_new\",\"type\":{\"name\":\"vector\",\"length\":" << N_new << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = m7x469s_model_namespace::m7x469s_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return m7x469s_model_namespace::profiles__;
}

#endif


