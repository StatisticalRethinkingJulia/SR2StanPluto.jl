
using Markdown
using InteractiveUtils

using Pkg, DrWatson

begin
	@quickactivate "StatisticalRethinkingStan"
	using StanSample, StanOptimize
	using StatisticalRethinking
end

md"## Clip-04-37-44.2s.jl"

begin
	df = CSV.read(sr_datadir("Howell1.csv"), DataFrame)
	df = filter(row -> row[:age] >= 18, df);
	mean_weight = mean(df.weight);
	df.weight_c = df.weight .- mean_weight;
end

md"##### Define the Stan language model."

stan4_4 = "
data {
 int < lower = 1 > N; // Sample size
 vector[N] height; // Predictor
 vector[N] weight; // Outcome
}

parameters {
 real alpha;                       // Intercept
 real beta;                        // Slope (regression coefficients)
 real < lower = 0 > sigma;         // Error SD
}

model {
	vector[N] mu;
	alpha ~ normal(178, 40);
	beta ~ normal(0, 2);
	for (n in 1:N) {
		mu[n] = alpha + (weight[n] - mean(weight)) * beta;
	}
	height ~ normal(mu , sigma);
}
";

md"##### Sample using stan_sample."

begin
	data = Dict(:N => length(df.height), :height => df.height, :weight => df.weight_c)
	init = Dict(:alpha => 170.0, :beta => 2.0, :sigma => 10.0)
	q4_4s, m4_4s, om = quap("m4.4s", stan4_4; data, init)
	quap4_4s_df = sample(q4_4s)
	PRECIS(quap4_4s_df)
end

if !isnothing(m4_4s)

	# Describe the draws

	chns4_4s = read_samples(m4_4s; output_format=:mcmcchains)
	CHNS(chns4_4s)
end

if !isnothing(m4_4s)

	# Use an appended dataframe

	post4_4s_df = read_samples(m4_4s; output_format=:dataframe)
	PRECIS(post4_4s_df)
end

md"### snippet 4.37"

if !isnothing(m4_4s)

	# Plot regression line using means and observations

	scatter(df.weight_c, df.height, lab="Observations",
	  ylab="height [cm]", xlab="weight[kg]")
	xi = -16.0:0.1:18.0
	yi = mean(post4_4s_df.alpha) .+ mean(post4_4s_df.beta)*xi;
	plot!(xi, yi, lab="Regression line")
end

md"### snippet 4.44"

plot(plot(quap4_4s_df.alpha, lab="alpha"), plot(quap4_4s_df.beta, lab="beta"), layout=(2, 1))

md"# End of clip-04-37-44.2s.jl"

