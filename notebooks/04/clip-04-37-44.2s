### A Pluto.jl notebook ###
# v0.12.12

using Markdown
using InteractiveUtils

# ╔═╡ 92d425a2-fb7f-11ea-0c47-03f8eec55862
using Pkg, DrWatson

# ╔═╡ 92d465d0-fb7f-11ea-09ac-dba2e8262027
begin
	@quickactivate "StatisticalRethinkingStan"
	using StanSample
	using StatisticalRethinking
end

# ╔═╡ 5aa8f26c-fb7e-11ea-0477-59c1da17fc15
md"## Clip-04-37-44.2s.jl"

# ╔═╡ 92d50a6c-fb7f-11ea-05fd-0533613f0978
begin
	df = CSV.read(sr_datadir("Howell1.csv"), DataFrame)
	df = filter(row -> row[:age] >= 18, df);
	mean_weight = mean(df.weight);
	df.weight_c = df.weight .- mean_weight;
end

# ╔═╡ 92e3b63e-fb7f-11ea-309a-5b6db7cdab70
md"##### Define the Stan language model."

# ╔═╡ 92e4747c-fb7f-11ea-0b2a-578127070b2c
stan4_4 = "
data {
 int < lower = 1 > N; // Sample size
 vector[N] height; // Predictor
 vector[N] weight; // Outcome
}

parameters {
 real alpha;                       // Intercept
 real beta;                        // Slope (regression coefficients)
 real < lower = 0 > sigma;         // Error SD
}

model {
	vector[N] mu;
	alpha ~ normal(178, 40);
	beta ~ normal(0, 2);
	for (n in 1:N) {
		mu[n] = alpha + (weight[n] - mean(weight)) * beta;
	}
	height ~ normal(mu , sigma);
}
";

# ╔═╡ 92f0bb54-fb7f-11ea-00b6-532f65c64bae
md"##### Define the SampleModel."

# ╔═╡ 92f1673e-fb7f-11ea-012b-cfd0fe1d6343
m4_4s = SampleModel("weights", stan4_4);

# ╔═╡ 92fcc818-fb7f-11ea-0e2d-8373091c45cb
md"##### Input data."

# ╔═╡ 92fd772c-fb7f-11ea-3a82-d94e4000559f
m4_4_data = Dict("N" => length(df.height), "height" => df.height, "weight" => df.weight_c);

# ╔═╡ 930a2c6a-fb7f-11ea-0637-9f9a4f99cbae
md"##### Sample using stan_sample."

# ╔═╡ 930bd916-fb7f-11ea-229f-eb6822da124c
rc4_4s = stan_sample(m4_4s, data=m4_4_data);

# ╔═╡ 931a5b3a-fb7f-11ea-1141-5d36d9e65042
if success(rc4_4s)

	# Describe the draws

	chns4_4s = read_samples(m4_4s; output_format=:mcmcchains)
	CHNS(chns4_4s)
end

# ╔═╡ 931d3abc-fb7f-11ea-197e-15f7d6b229b5
if success(rc4_4s)

	# Use an appended dataframe

	post4_4s_df = read_samples(m4_4s; output_format=:dataframe)
	PRECIS(post4_4s_df)
end

# ╔═╡ 9324cee4-fb7f-11ea-3826-55a5b6621195
md"### snippet 4.37"

# ╔═╡ 932c24fa-fb7f-11ea-1f58-8d2518905066
if success(rc4_4s)

	# Plot regression line using means and observations

	scatter(df.weight_c, df.height, lab="Observations",
	  ylab="height [cm]", xlab="weight[kg]")
	xi = -16.0:0.1:18.0
	yi = mean(post4_4s_df.alpha) .+ mean(post4_4s_df.beta)*xi;
	plot!(xi, yi, lab="Regression line")
end

# ╔═╡ 93343ef6-fb7f-11ea-1719-c53ce62d37aa
md"### snippet 4.44"

# ╔═╡ 933be70a-fb7f-11ea-085b-1f1e155132e1
if success(rc4_4s)
	q4_4s = quap(m4_4s)
	quap4_4s_df = sample(q4_4s)
	PRECIS(quap4_4s_df)
end

# ╔═╡ 93437c7e-fb7f-11ea-2fe6-6f5f2d64f110
plot(plot(quap4_4s_df.alpha, lab="alpha"), plot(quap4_4s_df.beta, lab="beta"), layout=(2, 1))

# ╔═╡ 934badd4-fb7f-11ea-24b7-1d2740deb647
md"# End of clip-04-37-44.2s.jl"

# ╔═╡ Cell order:
# ╟─5aa8f26c-fb7e-11ea-0477-59c1da17fc15
# ╠═92d425a2-fb7f-11ea-0c47-03f8eec55862
# ╠═92d465d0-fb7f-11ea-09ac-dba2e8262027
# ╠═92d50a6c-fb7f-11ea-05fd-0533613f0978
# ╟─92e3b63e-fb7f-11ea-309a-5b6db7cdab70
# ╠═92e4747c-fb7f-11ea-0b2a-578127070b2c
# ╟─92f0bb54-fb7f-11ea-00b6-532f65c64bae
# ╠═92f1673e-fb7f-11ea-012b-cfd0fe1d6343
# ╟─92fcc818-fb7f-11ea-0e2d-8373091c45cb
# ╠═92fd772c-fb7f-11ea-3a82-d94e4000559f
# ╟─930a2c6a-fb7f-11ea-0637-9f9a4f99cbae
# ╠═930bd916-fb7f-11ea-229f-eb6822da124c
# ╠═931a5b3a-fb7f-11ea-1141-5d36d9e65042
# ╠═931d3abc-fb7f-11ea-197e-15f7d6b229b5
# ╟─9324cee4-fb7f-11ea-3826-55a5b6621195
# ╠═932c24fa-fb7f-11ea-1f58-8d2518905066
# ╟─93343ef6-fb7f-11ea-1719-c53ce62d37aa
# ╠═933be70a-fb7f-11ea-085b-1f1e155132e1
# ╠═93437c7e-fb7f-11ea-2fe6-6f5f2d64f110
# ╟─934badd4-fb7f-11ea-24b7-1d2740deb647
